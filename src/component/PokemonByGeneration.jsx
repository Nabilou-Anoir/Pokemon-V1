import { useState, useEffect, useRef } from "react"
import spinner from "../assets/spinner.svg"
import PokedexList from "./pages/PokedexList";

// üí° Pourquoi on utilise await parfois (m√™me si ici on ne l‚Äôutilise pas) :
// Le mot-cl√© `await` permet d‚Äô√©crire du code asynchrone de mani√®re plus lisible,
// comme si c‚Äô√©tait du code synchrone. Exemple :
// const res = await fetch(...); const data = await res.json();
// Mais ici, on garde la logique avec .then() pour encha√Æner les promesses sans await,
// ce qui est aussi totalement valide.

export default function PokemonByGeneration() {
    // √âtat pour garder en m√©moire la g√©n√©ration s√©lectionn√©e (par d√©faut, la premi√®re g√©n√©ration)
    const[selectedTab,setSelectedTab]= useState(1)
    
    // APIState contient l'√©tat global de la requ√™te API :
    // loading : indique si la requ√™te est en cours
    // error : indique s'il y a eu une erreur lors de la requ√™te
    // data : stocke les donn√©es r√©cup√©r√©es (tableau de Pok√©mon d√©taill√©s)
    const [APIState,setApiState]=useState ({
        loading: false,
        error:false,
        data:undefined,
    });

    // Ref pour m√©moriser les donn√©es d√©j√† charg√©es afin d'√©viter des appels r√©seau inutiles
    const cacheRef = useRef({});

    // tabsData est un tableau d'objets repr√©sentant les onglets de g√©n√©ration
    // Chaque objet contient un id (1 √† 9) et le texte affich√© pour l'onglet
    const tabsData = [
        { id: 1, txt: "G√©n√©ration I" },
        { id: 2, txt: "G√©n√©ration II" },
        { id: 3, txt: "G√©n√©ration III" },
        { id: 4, txt: "G√©n√©ration IV" },
        { id: 5, txt: "G√©n√©ration V" },
        { id: 6, txt: "G√©n√©ration VI" },
        { id: 7, txt: "G√©n√©ration VII" },
        { id: 8, txt: "G√©n√©ration VIII" },
        { id: 9, txt: "G√©n√©ration IX" },
    ];
    
    // useEffect se d√©clenche √† chaque changement de selectedTab
    // Il lance la r√©cup√©ration des donn√©es des Pok√©mon de la g√©n√©ration choisie
    useEffect(() => {
        // Si les donn√©es sont d√©j√† en cache, les utiliser directement sans refaire la requ√™te r√©seau
        if (cacheRef.current[selectedTab]) {
            setApiState({ loading: false, error: false, data: cacheRef.current[selectedTab] });
            return;
        }

        // Sinon, on indique que le chargement commence (loading = true)
        setApiState({ ...APIState, loading: true });

        // Requ√™te vers l'API pour r√©cup√©rer les esp√®ces de Pok√©mon de la g√©n√©ration s√©lectionn√©e
        fetch(`https://pokeapi.co/api/v2/generation/${selectedTab}`)
            .then((res) => {
                // V√©rifie si la r√©ponse est correcte, sinon on d√©clenche une erreur
                if (!res.ok) throw new Error("Erreur lors la recup√©ration des donn√©es");
                return res.json();
            })
            .then(data => {
                // Pour chaque esp√®ce de Pok√©mon, on va r√©cup√©rer ses donn√©es d√©taill√©es
                return Promise.all(
                    data.pokemon_species.map(species =>
                        fetch(species.url)
                            .then(res => res.json())
                            .then(speciesData => {
                                // On trouve la vari√©t√© par d√©faut du Pok√©mon (forme principale)
                                const defaultVariety = speciesData.varieties.find(v => v.is_default);
                                if (!defaultVariety) throw new Error("Pas de forme par d√©faut");

                                // On r√©cup√®re ensuite les donn√©es du Pok√©mon correspondant √† cette vari√©t√© par d√©faut
                                return fetch(defaultVariety.pokemon.url)
                                    .then(res => res.json())
                                    .then(pokemonData => {
                                        // On cherche les noms en fran√ßais et en anglais pour un affichage localis√©
                                        const frenchNameObj = speciesData.names.find(n => n.language.name === "fr");
                                        const englishNameObj = speciesData.names.find(n => n.language.name === "en");

                                        // On retourne un objet combinant les donn√©es du Pok√©mon et ses noms localis√©s
                                        return {
                                            ...pokemonData,
                                            frenchName: frenchNameObj ? frenchNameObj.name : pokemonData.name,
                                            englishName: englishNameObj ? englishNameObj.name : pokemonData.name
                                        };
                                    });
                            })
                            .catch(error => {
                                // En cas d'erreur lors du fetch d'un Pok√©mon, on affiche un avertissement et on ignore ce Pok√©mon
                                console.warn(`Erreur pour ${species.name}:`, error.message);
                                return null;
                            })
                    )
                );
            })
            .then(detailedData => {
                // On filtre les donn√©es pour retirer les Pok√©mon qui n'ont pas pu √™tre charg√©s (null)
                const filtered = detailedData.filter(p => p !== null);
                // On met en cache les donn√©es pour la g√©n√©ration s√©lectionn√©e afin d'√©viter de refaire la requ√™te plus tard
                cacheRef.current[selectedTab] = filtered;
                // On met √† jour l'√©tat avec les donn√©es charg√©es et on indique que le chargement est termin√© sans erreur
                setApiState({ loading: false, error: false, data: filtered });
            })
            .catch((err) => {
                // En cas d'erreur g√©n√©rale (ex: probl√®me r√©seau), on affiche un message d'erreur et on arr√™te le chargement
                console.error("Erreur :", err);
                setApiState({ loading: false, error: true, data: undefined });
            });
    }, [selectedTab]);
          
    // Variable content qui contiendra le contenu √† afficher en fonction de l'√©tat APIState
    let content;
    
    // Affichage conditionnel selon l'√©tat de la requ√™te :
    if (APIState.loading) 
        // Si on charge les donn√©es, on affiche un spinner pour indiquer que √ßa travaille en arri√®re-plan
        content =<img src={spinner} alt="Icon chargement" />
    else if (APIState.error )
        // En cas d'erreur, on affiche un message d'erreur simple pour informer l'utilisateur
        content = <p>Une erreur est survenue </p>
    else if (APIState.data?.length > 0) {
        // Si on a des donn√©es, on affiche la liste des Pok√©mon sous forme de grille responsive
        content = (
            <ul className="w-full grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
                {APIState.data.map(item => (
                    <li key={item.id} className="w-full">
                        <button className="bg-white shadow-md rounded p-4 flex flex-col items-center text-center w-full h-full hover:bg-slate-100">
                            {/* Affichage de l'image du Pok√©mon */}
                            <img src={item.sprites.front_default} alt={item.name} className="w-20 h-20" />
                            {/* Nom fran√ßais en gras */}
                            <span className="font-bold mt-2">{item.frenchName}</span>
                            {/* Nom anglais en gris plus petit */}
                            <span className="text-sm text-gray-500">{item.englishName}</span>
                        </button>
                    </li>
                ))}
            </ul>
        );
    }

    // Rendu principal du composant
    return (
        // Conteneur principal avec une largeur maximale et une bordure pour d√©limiter la zone
        <div className="w-full max-w-7xl min-h-[250px] mx-auto rounded border border-slate-400">
            {/* Barre d'onglets pour s√©lectionner la g√©n√©ration */}
            <div className="flex divide-x divide-slate-700">
                {tabsData.map((obj,index)=>(
                    <button
                        key ={index}
                        // Au clic, on change la g√©n√©ration s√©lectionn√©e en mettant √† jour selectedTab
                        onClick={()=> setSelectedTab(obj.id)}
                        className="w-full p-4 bg-slate-200 hover:bg-slate-300">
                        {/* Affichage du texte de l'onglet (ex : Generation 1) */}
                        Generation {index+1}
                    </button>
                ) )}
            </div>
            {/* Contenu affich√© sous la barre d'onglets */}
            <div className="w-full p-4">
                {/* Affiche le texte de la g√©n√©ration s√©lectionn√©e pour informer l'utilisateur */}
                <p className="text-slate-100">{tabsData.find(t => t.id === selectedTab)?.txt}</p>
                {/* Affichage conditionnel du contenu (spinner, erreur ou liste) */}
                {content}
            </div>
        </div>
    )
}